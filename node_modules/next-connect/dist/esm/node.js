import { Router } from "./router.js";
export class NodeRouter extends Router {
    constructor() {
        super();
    }
    prepareRequest(req, res, findResult) {
        req.params = {
            ...findResult.params,
            ...req.params, // original params will take precedence
        };
    }
    async run(req, res) {
        const result = this.find(req.method, getPathname(req.url));
        if (!result.fns.length)
            return;
        this.prepareRequest(req, res, result);
        return Router.exec(result.fns, req, res);
    }
    handler(options = {}) {
        const onNoMatch = options.onNoMatch || onnomatch;
        const onError = options.onError || onerror;
        return async (req, res) => {
            const result = this.find(req.method, getPathname(req.url));
            this.prepareRequest(req, res, result);
            try {
                if (result.fns.length === 0 || result.middleOnly) {
                    await onNoMatch(req, res);
                }
                else {
                    await Router.exec(result.fns, req, res);
                }
            }
            catch (err) {
                await onError(err, req, res);
            }
        };
    }
}
function onnomatch(req, res) {
    res.statusCode = 404;
    res.end(req.method !== "HEAD"
        ? `Route ${req.method} ${req.url} not found`
        : undefined);
}
function onerror(err, req, res) {
    res.statusCode = 500;
    console.error(err);
    res.end("Internal Server Error");
}
export function getPathname(url) {
    const queryIdx = url.indexOf("?");
    return queryIdx !== -1 ? url.substring(0, queryIdx) : url;
}
export function createRouter() {
    return new NodeRouter();
}
