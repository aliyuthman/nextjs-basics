import { Router } from "./router.js";
export class EdgeRouter extends Router {
    constructor() {
        super();
    }
    prepareRequest(req, ctx, findResult) {
        req.params = {
            ...findResult.params,
            ...req.params, // original params will take precedence
        };
    }
    async run(req, ctx) {
        const result = this.find(req.method, getPathname(req));
        if (!result.fns.length)
            return;
        this.prepareRequest(req, ctx, result);
        return Router.exec(result.fns, req, ctx);
    }
    handler(options = {}) {
        const onNoMatch = options.onNoMatch || onnomatch;
        const onError = options.onError || onerror;
        return async (req, ctx) => {
            const result = this.find(req.method, getPathname(req));
            this.prepareRequest(req, ctx, result);
            try {
                if (result.fns.length === 0 || result.middleOnly) {
                    return await onNoMatch(req, ctx);
                }
                else {
                    return await Router.exec(result.fns, req, ctx);
                }
            }
            catch (err) {
                return onError(err, req, ctx);
            }
        };
    }
}
function onnomatch(req) {
    return new Response(req.method !== "HEAD" ? `Route ${req.method} ${req.url} not found` : null, { status: 404 });
}
function onerror(err) {
    console.error(err);
    return new Response("Internal Server Error", { status: 500 });
}
export function getPathname(req) {
    return (req.nextUrl || new URL(req.url)).pathname;
}
export function createEdgeRouter() {
    return new EdgeRouter();
}
